前情回顾

1. FTP文件服务

   请求应答

2. IO模型

   IO ： cpu消耗少 速度慢  易阻塞

   * 阻塞IO： 效率低 简单

   * 非阻塞 ： setblocking()  settimeout()

3. io 多路复用

io多路复用方法对比

                平台支持             监控IO数量     执行效率
select         优秀（全部）             1024         一般

poll           良好（Linux，unix）      无限制        一般

epoll          较差（Linux）            无限制        较高

练习1： index.html 这个网页内容显示在浏览器上
要求，浏览器可以多次访问

Web 服务程序

假定 ： 用户有一组网页，希望使用我们提供的类快速搭建一个服务，实现
自己网页的展示浏览

主要功能 ：
【1】 接收客户端（浏览器）请求
【2】 解析客户端发送的请求
【3】 根据请求组织数据内容
【4】 将数据内容形成http响应格式返回给浏览器

特点 ：
【1】 采用IO并发，可以满足多个客户端同时发起请求情况
【2】 通过类接口形式进行功能封装
【3】 做基本的请求解析，根据具体请求返回具体内容，同时处理客户端的非网页请求行为

对功能进行类封装设计

1. 从功能使用方法的角度分析
2. 借鉴自己曾经用过的Python类

    socket()
       实例化对象 ————> 用户可以选择何种套接字（不同的套接字功能不同）

       不同对象能够调用的方法不一样

    Process()
       实例化对象 ----> 功能单一

       固定的流程去实现指定功能 ： Process()  start()  join()

       用户决定：使用进程干什么

3. 设计原则
   * 站在用户角度，想用法
   * 能够为用户实现的 不麻烦使用者
   * 不能提使用者决定的，提供接口（参数） 让用户方便传递或者
     让用户调用不同的方法做选择

4. 编写步骤  ： 先搭建框架，在时间具体业务逻辑


http训练：
1. 根据请求内容 info 决定给客户端发送什么
2. 如果请求内容有给客户端200    没有要返回404


